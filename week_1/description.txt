В проекте есть Пользователь (Попугай).
Это сущность, которая нужна практически во всех сервисах.
Для этого в каждом из них мы создаем модель User со своим специфичным пабором полей
Например в сервисе Auth в этой модели есть token авторизации

В серсисе предпологается 4 сервиса
- Аутентификация / Авторизация
- Таск трекер
- Accounting (Бухгалтерия)
- Аналитика

Схема пока описывает полностью асинхронную работу
Но уже сейчас понятно, что создание пользователя - операция синхронная.
И нужно придумать механизм, когда пользователь (или его слепок) появляется в каждой системе сразу.
Это можно сделать например через клиента.
Во время создания Попугая отдавать ему в куках частичный объект пользователя,
чтобы другие сервисы могли его создать(в не подтвержденном статусе) при запросе сервиса. До получения из брокера

Вроде на текущем этапе все остальные запросы могут быть асинхронными

События
- Создание пользователя (продьюсер: AuthService, консьюмеры: [TaskService, AccountingService])
- Создание таска (продьюсер: TaskService, консьюмеры: [AccountingService])
- Обновление пользователя у таска (продьюсер: TaskService, консьюмеры: [AccountingService])
- Обновление статуса у таска (продьюсер: TaskService, консьюмеры: [AccountingService])
- Баланс (продьюсер: AccountingService, консьюмеры: [AnalyticsService])
